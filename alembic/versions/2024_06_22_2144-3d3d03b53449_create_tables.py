"""create tables

Revision ID: 3d3d03b53449
Revises: 
Create Date: 2024-06-22 21:44:27.148005

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "3d3d03b53449"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "daily_schedule",
        sa.Column(
            "day",
            sa.Enum(
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                name="day",
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_daily_schedule")),
    )
    op.create_table(
        "semester",
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column(
            "number",
            sa.Enum("first", "second", name="semesternumber"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_semester")),
    )
    op.create_table(
        "teacher",
        sa.Column("lastname", sa.String(), nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("patronymic", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("active", "inactive", name="userstatus"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_teacher")),
    )
    op.create_table(
        "group",
        sa.Column("course", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("faculty", sa.String(), nullable=False),
        sa.Column("chair", sa.String(), nullable=False),
        sa.Column("specialty", sa.String(), nullable=False),
        sa.Column("specialty_code", sa.Integer(), nullable=False),
        sa.Column("curator", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "course >= 1 AND course <= 5",
            name=op.f("ck_group_check_course_range"),
        ),
        sa.ForeignKeyConstraint(
            ["curator"], ["teacher.id"], name=op.f("fk_group_curator_teacher")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_group")),
        sa.UniqueConstraint("curator", name=op.f("uq_group_curator")),
        sa.UniqueConstraint("number", name=op.f("uq_group_number")),
    )
    op.create_table(
        "student_subject_association",
        sa.Column("kz1", sa.Integer(), server_default="0", nullable=True),
        sa.Column("kz2", sa.Integer(), server_default="0", nullable=True),
        sa.Column(
            "exam_grade", sa.Integer(), server_default="0", nullable=True
        ),
        sa.Column("semester_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "kz1 >= 0 AND kz1 <= 100",
            name=op.f("ck_student_subject_association_check_kz1_range"),
        ),
        sa.CheckConstraint(
            "kz2 >= 0 AND kz2 <= 100",
            name=op.f("ck_student_subject_association_check_kz2_range"),
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semester.id"],
            name=op.f("fk_student_subject_association_semester_id_semester"),
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f("pk_student_subject_association")
        ),
    )
    op.create_table(
        "subject",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("exam_date", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["teacher_id"],
            ["teacher.id"],
            name=op.f("fk_subject_teacher_id_teacher"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subject")),
    )
    op.create_table(
        "lesson",
        sa.Column("daily_schedule_id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column(
            "lesson_type",
            sa.Enum(
                "lecture",
                "laboratory",
                "practical",
                "consultation",
                "exam",
                name="lessontype",
            ),
            nullable=False,
        ),
        sa.Column("subject_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["daily_schedule_id"],
            ["daily_schedule.id"],
            name=op.f("fk_lesson_daily_schedule_id_daily_schedule"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_lesson_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_lesson")),
    )
    op.create_table(
        "student",
        sa.Column("lastname", sa.String(), nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("patronymic", sa.String(), nullable=False),
        sa.Column("registration_number", sa.Integer(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("budget", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("active", "inactive", name="userstatus"),
            nullable=False,
        ),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"], ["group.id"], name=op.f("fk_student_group_id_group")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_student")),
        sa.UniqueConstraint(
            "lastname",
            "firstname",
            "patronymic",
            name=op.f("uq_student_lastname_firstname_patronymic"),
        ),
    )
    op.create_table(
        "weekly_schedule",
        sa.Column(
            "week_type",
            sa.Enum("denominator", "numerator", name="weektype"),
            nullable=False,
        ),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
            name=op.f("fk_weekly_schedule_group_id_group"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_weekly_schedule")),
        sa.UniqueConstraint(
            "group_id", name=op.f("uq_weekly_schedule_group_id")
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("weekly_schedule")
    op.drop_table("student")
    op.drop_table("lesson")
    op.drop_table("subject")
    op.drop_table("student_subject_association")
    op.drop_table("group")
    op.drop_table("teacher")
    op.drop_table("semester")
    op.drop_table("daily_schedule")
    # ### end Alembic commands ###
